{"version":3,"sources":["components/TodoItem/index.js","data/todosData.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","type","data-id","item","id","checked","completed","onChange","handleChange","text","todosData","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","bind","assertThisInitialized","event","target","parseInt","getAttribute","setState","prevState","map","todo","_this2","todoItems","components_TodoItem","key","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAmBeA,MAhBf,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,WACLC,UAASN,EAAMO,KAAKC,GACpBC,QAAST,EAAMO,KAAKG,UACpBC,SAAUX,EAAMY,eAElBX,EAAAC,EAAAC,cAAA,KAAGC,UAAWJ,EAAMO,KAAKG,UAAY,YAAc,MAChDV,EAAMO,KAAKM,QCeLC,EA5BG,CAChB,CACEN,GAAI,EACJK,KAAM,6BACNH,WAAW,GAEb,CACEF,GAAI,EACJK,KAAM,mBACNH,WAAW,GAEb,CACEF,GAAI,EACJK,KAAM,mBACNH,WAAW,GAEb,CACEF,GAAI,EACJK,KAAM,yBACNH,WAAW,GAEb,CACEF,GAAI,EACJK,KAAM,6BACNH,WAAW,ICuBAK,qBAzCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,MAAOV,GAETE,EAAKJ,aAAeI,EAAKJ,aAAaa,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALRA,4EAQDW,GACX,IAAMC,EAASC,SAASF,EAAMC,OAAOE,aAAa,YAClDX,KAAKY,SAAS,SAAAC,GAOZ,MAAO,CACLR,MAPmBQ,EAAUR,MAAMS,IAAI,SAAAC,GAIvC,OAHIA,EAAK1B,KAAOoB,IACdM,EAAKxB,WAAawB,EAAKxB,WAElBwB,wCAQJ,IAAAC,EAAAhB,KACDiB,EAAYjB,KAAKI,MAAMC,MAAMS,IAAI,SAAA1B,GAAI,OACzCN,EAAAC,EAAAC,cAACkC,EAAD,CACEC,IAAK/B,EAAKC,GACVD,KAAMA,EACNK,aAAcuB,EAAKvB,aAAaa,KAAKlB,EAAKC,QAI9C,OACEP,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqC,SAAA,KACEtC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,kBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAagC,WApClBI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e738a647.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction TodoItem(props) {\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <input\r\n        type=\"checkbox\"\r\n        data-id={props.item.id}\r\n        checked={props.item.completed}\r\n        onChange={props.handleChange}\r\n      />\r\n      <p className={props.item.completed ? \"completed\" : null}>\r\n        {props.item.text}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","const todosData = [\r\n  {\r\n    id: 1,\r\n    text: \"Make a Todo app with React\",\r\n    completed: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"Grocery shopping\",\r\n    completed: false\r\n  },\r\n  {\r\n    id: 3,\r\n    text: \"Clean birds cage\",\r\n    completed: false\r\n  },\r\n  {\r\n    id: 4,\r\n    text: \"Read You don't know JS\",\r\n    completed: true\r\n  },\r\n  {\r\n    id: 5,\r\n    text: \"Catch up on House of Cards\",\r\n    completed: false\r\n  }\r\n];\r\n\r\nexport default todosData;\r\n","import React, { Component } from \"react\";\nimport TodoItem from \"./components/TodoItem\";\nimport todosData from \"./data/todosData\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: todosData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const target = parseInt(event.target.getAttribute(\"data-id\"));\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.id === target) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      return {\n        todos: updatedTodos\n      };\n    });\n  }\n\n  render() {\n    const todoItems = this.state.todos.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        handleChange={this.handleChange.bind(item.id)}\n      />\n    ));\n\n    return (\n      <>\n        <h1 className=\"title\">React Todo App</h1>\n        <div className=\"todo-list\">{todoItems}</div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}